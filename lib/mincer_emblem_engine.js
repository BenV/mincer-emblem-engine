// Generated by CoffeeScript 1.7.1
(function() {
  var EmblemEngine, context, fs, include, included, mincer, options, path, sandbox, sys, vm,
    __hasProp = {}.hasOwnProperty;

  vm = require('vm');

  fs = require('fs');

  sys = require('sys');

  path = require('path');

  mincer = require('mincer');

  included = false;

  sandbox = {
    self: {}
  };

  context = vm.createContext(sandbox);

  include = function(file_name) {
    var code;
    code = fs.readFileSync(path.resolve(file_name));
    return vm.runInContext(code, context, file_name);
  };

  options = {
    template_path: '/templates/',
    jquery: "" + __dirname + "/../vendor/jquery_shim.js",
    handlebars: "" + __dirname + "/../vendor/handlebars.js",
    ember: "" + __dirname + "/../vendor/ember.js",
    emblem: "" + __dirname + "/../vendor/emblem.js"
  };

  EmblemEngine = module.exports = function() {
    return mincer.Template.apply(this, arguments);
  };

  EmblemEngine.options = function(opts) {
    var key, value, _results;
    if (opts == null) {
      opts = {};
    }
    _results = [];
    for (key in opts) {
      if (!__hasProp.call(opts, key)) continue;
      value = opts[key];
      _results.push(options[key] = value);
    }
    return _results;
  };

  EmblemEngine.defaultMimeType = 'application/javascript';

  EmblemEngine.register = function(environment, options) {
    if (options == null) {
      options = false;
    }
    if (options) {
      EmblemEngine.options(options);
    }
    return environment.registerEngine(".emblem", EmblemEngine);
  };

  EmblemEngine.prototype.evaluate = function(ctx, locals) {
    var root, template, template_path;
    if (!included) {
      included = true;
      include(options.jquery);
      include(options.handlebars);
      include(options.ember);
      include(options.emblem);
    }
    template = context.Emblem.precompile(context.Ember.Handlebars, this.data).toString();
    root = false;
    ctx.environment.paths.forEach((function(_this) {
      return function(path) {
        path = path + options.template_path;
        if (_this.file.indexOf(path) === 0) {
          return root = fs.realpathSync(path);
        }
      };
    })(this));
    template_path = this.file.substring(root.length + 1);
    template_path = template_path.split('.')[0];
    return "Ember.TEMPLATES['" + template_path + "'] = Ember.Handlebars.template(" + template + ");\n";
  };

}).call(this);
